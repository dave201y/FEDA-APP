// src/entities/UserPreferences.ts

export interface UserPreferences {
  id: string; // Typically generated by the database
  user_id: string; // The ID of the user these preferences belong to
  preferred_categories: string[];
  blocked_categories: string[];
  parental_mode: boolean;
  daily_time_limit: number; // In minutes
  created_at?: string;
  updated_at?: string;
}

// --- Mock Data (Replace with Appwrite SDK calls later) ---
const mockUserPreferencesStore: UserPreferences[] = [{
  id: "user_pref_123",
  user_id: "user@example.com", // Using email as a mock ID for now
  preferred_categories: ["educational", "travel"],
  blocked_categories: [],
  parental_mode: false,
  daily_time_limit: 60,
  created_at: "2024-01-01T00:00:00Z",
  updated_at: "2024-07-15T10:30:00Z"
}];

export const UserPreferences = {
  /**
   * Filters mock user preferences. In a real app, this would query Appwrite.
   * @param filters (object) - Key-value pairs to filter by (e.g., { user_id: "user@example.com" }).
   * @returns Promise<UserPreferences[]>
   */
  filter: async (filters: { user_id: string }): Promise<UserPreferences[]> => {
    await new Promise(resolve => setTimeout(resolve, 500)); // Simulate API delay
    if (filters.user_id) {
      return mockUserPreferencesStore.filter(pref => pref.user_id === filters.user_id);
    }
    return [];
  },

  /**
   * Updates a mock user preference document.
   * @param id (string) - ID of the preference document to update.
   * @param data (Partial<UserPreferences>) - Partial object with fields to update.
   * @returns Promise<void>
   */
  update: async (id: string, data: Partial<UserPreferences>): Promise<void> => {
    await new Promise(resolve => setTimeout(resolve, 100)); // Simulate API delay
    const prefIndex = mockUserPreferencesStore.findIndex(p => p.id === id);
    if (prefIndex !== -1) {
      mockUserPreferencesStore[prefIndex] = { ...mockUserPreferencesStore[prefIndex], ...data, updated_at: new Date().toISOString() };
      console.log(`Mock UserPreferences ${id} updated:`, mockUserPreferencesStore[prefIndex]);
    } else {
      console.warn(`Mock UserPreferences with ID ${id} not found for update.`);
    }
  },

  /**
   * Creates a mock user preference document.
   * @param data (Omit<UserPreferences, 'id' | 'created_at' | 'updated_at'>) - The preference object to create (excluding auto-generated fields).
   * @returns Promise<UserPreferences>
   */
  create: async (data: Omit<UserPreferences, 'id' | 'created_at' | 'updated_at'>): Promise<UserPreferences> => {
    await new Promise(resolve => setTimeout(resolve, 100));
    const newPref: UserPreferences = {
      ...data,
      id: "pref_" + Math.random().toString(36).substring(2, 11), // Simple ID generation
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
    mockUserPreferencesStore.push(newPref);
    console.log("Mock UserPreferences created:", newPref);
    return newPref;
  }
};
